
""""
Always check three test cases:
Zero element/Empty list
One element/single Node
General case

General operations:
    Insert element in list: operation is used to create linked list
    Print various elements in list
    Search an element in list
    Delete an element in the list
    Reverse a linked list
    
Insertion:
    Insertion of element at start of linked list
    Insertion of an element at the end of linked list
    Insertion of element at K-th position of linked list
    Insert element in sorted order in linked list
    
"""

#Singly linked List
class Node:
    def __init__(self, value, next_node=None, prev_node=None):
        self.value = value
        self.next = next_node
        self.prev = prev_node

    def __str__(self):
        return str(self.value)

class LinkedList:
    def __init__(self, values=None):
        self.head = None
        self.tail = None
        if values is not None:
            self.add_multiple_nodes(values)
            
    def __str__(self):
        return ' -> '.join([str(node) for node in self])
    
    def __len__(self):
        count = 0
        node = self.head
        while node:
            count += 1
            node = node.next
        return count
    
    def __iter__(self):
        current = self.head
        while current:
            yield current
            current = current.next
    
    def values(self):
        return [node.value for node in self]
    
    def add_node(self, value):
        if self.head is None:
            self.tail = self.head = Node(value)
        else:
            self.tail.next = Node(value)
            self.tail = self.tail.next
        return self.tail
    
    def add_multiple_nodes(self, values):
        for value in values:
            self.add_node(value)
            
    def add_node_as_head(self, value):
        if self.head is None:
            self.tail = self.head = Node(value)
        else:
            self.head = Node(value, self.head)
        return self.head
    
    def sortedInsert(self, value):
        newnode = Node(value, None, None)
        curr = self.head
        if curr is None or curr.value > value:
            newnode.next = self.head
            self.head = newnode
            return
        while curr.next != None and curr.next.value <value:
            curr = curr.next
        newnode.next =curr.next
        curr.next = newnode
    
    def isPresent(self, value):
        temp = self.head
        while temp != None:
            if temp.value == value:
                return True
                temp = temp.next
        return False
    
    def removeHead(self):
        if self.head is None:
            raise RuntimeError('Empty List Exception')
        value = self.head.value
        self.head = self.head.next
        return value
    
    def deletenode(self, value):
        temp = self.head
        if temp is None:
            return False
        if value == self.head.value:
            self.head = self.head.next
            return True
        while temp.next != None:
            if temp.next.value == value:
                temp.next = temp.next.next
                return True
            temp = temp.next
        return False
    
    def deletenodes(self, value):
        curr = self.head
        while curr != None and curr == value:
            self.head = curr.next
            curr = self.head
        
        while curr != None:
            nextnode = curr.next
            if nextnode != None and nextnode == value:
                curr.next = nextnode.next
            else:
                curr = nextnode
    #Delete Linked List
    def freeList(self):
        self.head = None
    
    #Reverse a linked list using three pointers
    def reverse(self):
        curr = self.head
        prev = None
        while curr != None:
            nextval = curr.next
            curr.next = prev 
            prev = curr 
            curr = nextval
        self.head = prev 
    
    #Reverse a linked list using recursion
    def reverseRecursiveUtil(self, currnode, nextnode):
        if currnode == None:
            return None
        if currnode.next == None:
            currnode.next = nextnode
            return nextnode
        ret = self.reverseRecursiveUtil(currnode.next, currnode)
        currnode.next = nextnode
        return ret
        
    def reverseRecursive(self):
        self.head = self.reverseRecursiveUtil(self.head, None)
    
    #Remove duplicates from list, assume list is sorted
    def removeDuplicates(self):
        curr = self.head
        while curr != None:
            if curr.next != None and curr.value == curr.next.value:
                curr.next = curr.next.next
            else:
                curr = curr.next
   
    #Compare two lists recursively 
    def comparelistutil(self, head1, head2):
        if head1 == None and head2 == None:
            return True
        elif (head1 == None) or (head2 == None) or(head1 != head2):
            return False
        else:
            return self.comparelistutil(head1.next, head2.next)
        
    def comparelist(self,l1):
        return self.comparelistutil(self.head, l1.head)
        
    #Find n-th node from beginning
    def nthNode(self, index):
        if index > self.__len__() or index <1:
            raise RuntimeError('IndexOutOfRange')
        count = 1
        curr = self.head
        while curr != None and count < index:
            count += 1
            curr = curr.next
        return curr.value 
    
    #Detect loop in list
    #SPFP (Slow pointer Fast pointer)
    def loopdetect(self):
        slowptr = fastptr = self.head    
        while fastptr.next != None and slowptr.next != None:
            slowptr = slowptr.next
            fastptr = fastptr.next.next  
            if slowptr == fastptr:
                print('Loop Found')
            print('Loop not Found')
        return False
    
    #Given there is a loop in linked linst, remove link
    def loopdetected(self):
        slowptr = fastptr = self.head    
        while fastptr.next != None and slowptr.next != None:
            slowptr = slowptr.next
            fastptr = fastptr.next.next  
            if slowptr == fastptr:
                return slowptr
        return None
    
    def removeloop(self):
        looppoint = self.loopdetected()
        if looppoint == None:
            raise RuntimeError('LoopNotFound')
        firstptr = self.head
        if looppoint == self.head:
            while firstptr.next != self.head:
                firstptr = firstptr.next;
            firstptr.next = None
            return
        secondptr = looppoint
        while firstptr.next != secondptr.next:
            firstptr = firstptr.next
            secondptr = secondptr.next
        secondptr.next = None
    
    # Given that two lists intersect, find intersection point
    def findintersect(self, head, head2):
        l1 = 0
        l2 = 0
        temphead = head
        temphead2 = head2
        while temphead != None:
            l1 += 1
            temphead = temphead.next
        while temphead2 != None:
            l2 += 1
            temphead2 = temphead2.next
        diff = 0
        if l1 < l2:
            temp = head
            head = head2
            head2 = temp
            diff = l2 -l1
        else:
            diff = l1 - l2
        
        while diff > 0:
            head = head.next
            diff -= 1
        while head != head2:
            head = head.next
            head2 = head2.next
        return head 

#Double linked list has two pointers: one pointing to previous node
#and another pointing to next
class DoublyLinkedList(LinkedList):
    def add_node(self, value):
        if self.head is None:
            self.tail = self.head = Node(value)
        else:
            self.tail.next = Node(value, None, self.tail)
            self.tail = self.tail.next
        return self
    def add_node_as_head(self, value):
        if self.head is None:
            self.tail = self.head = Node(value)
        else:
            current_head = self.head
            self.head = Node(value, current_head)
            current_head.prev = self.head
        return self.head

#Circular Linked List is like singly linked list except last element points 
#to first node
class CircularLinkedList:
    class Node(object):
        def __init__(self, value, next_node = None):
            self.value = value
            self.next = next_node
    def ___init__(self, values = None):
        self.tail = None
    
    #add head to front of list
    def addhead(self, value):
        temp = self.Node(value,None)
        if self.tail == None:
            self.tail = None
            temp.next = temp
        else:
            temp.next = self.tail.next
            self.tail.next = temp
            
    #add tail to back of list
    def addtail(self, value):
        temp = self.Node(value, None)
        if self.tail == None:
            self.tail = temp
            temp.next = temp
        else:
            temp.next = self.tail.next
            self.tail.next = temp
            self.tail = temp
            
    #Remove the first element of the linked list
    def removeHead(self):
        if self.tail == None:
            raise RuntimeError('EmptyListException')
        value = self.tail.next.value 
        if self.tail == self.tail.next:
            self.tail = None
        else:
            self.tail.next = self.tail.next.next
        return value 
    
    #Remove a node given its value
    def removeNode(self, key):
        if self.tail == None:
            raise RuntimeError('EmptyListException')
            
        curr = self.tail.next
        head = self.tail.next
        
        if curr.value == key:
            if curr == curr.next:
                self.tail = None
            else:
                self.tail.next = self.tail.next.next
            return True
        
        prev = curr
        curr = curr.next
        while curr != head:
            if curr.value == key:
                if curr == self.tail:
                    self.tail = prev 
                prev.next = curr.next
                return True
            prev = curr
            curr = curr.next
            
        return False
    
    
        
    
    
ll = LinkedList([1,2,3])
ll.reverse()
print(ll.__str__())

# ll.addHead(3)
# ll.printList()

