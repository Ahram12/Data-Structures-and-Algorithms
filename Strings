

text ="My zombie ate my dog"
pattern = 'dog'

#Brute Force approach to string matching
def BruteForceSearch(text, pattern):
    i = 0
    n = len(text)
    m = len(pattern)
    
    while i < n:
        j = 0
        while j < m and pattern[j] == text[i]:
            print(i,text[i])
            j += 1
            i += 1
        i += 1
    return print('No match found')
        
#Robin-Karp Algorithm
def RobinKarp(text, pattern):
    n = len(text)
    m = len(pattern)
    prime = 101
    powm = 1
    TextHash = 0
    PatternHash = 0
    
    if m == 0 or m > n:
        return -1
    
    i = 0
    
    while i < m-1:
        powm = (powm << 1) % prime
        i += 1
    
    i = 0
    
    while i < m:
        PatternHash = ((PatternHash << 1) + ord(pattern[i])) % prime
        TextHash = ((TextHash << 1) + ord(text[i])) % prime
        i += 1
    
    i = 0
    
    while i <= (n - m):
        if TextHash == PatternHash:
            j = 0
            
            while j < m:
                if text[i+j] != pattern[j]:
                    break
                j += 1
                
            if j == m:
                return i
            
        TextHash = (((TextHash - ord(text[i])*powm)<<1) +ord(text[i+m])) % prime
            
        if TextHash < 0:
            TextHash += prime
        i += 1
            
    return -1
            
#Knuth-Morris-Pratt (KMP) Algorithm
def KMPPreprocess(pattern):
    m = len(pattern)
    lps = [0]*m
    j = 0
    i = 1
    
    while i < m:
        if pattern[i] == pattern[j]:
            j += 1
            lps[i] = j
            i += 1
        else:
            if j != 0:
                j = lps[j -1]
            else:
                lps[i] = 0
                i += 1
    return lps

def KMP(text, pattern):
    n = len(text)
    m = len(pattern)
    lps = KMPPreprocess(pattern)
    
    i = 0 #index for text
    j = 0 #index for pattern
    
    
    while (n-i) >= (m-j):
        if pattern[j] == text[i]:
            i += 1
            j += 1
            
        if j == m:
            print('Found pattern at index' + ' ' + str(i-j))
            j = lps[j-1]
            
        elif i < n and pattern[j] != text[i]:
            if j != 0:
                j = lps[j-1]
            else:
                i += 1

#Implement Binary Search Tree as a symbol table
class StringTree(object):
    #Creates sub-class of nodes with String Tree object
    #Every node is given a string and at most two children
    class Node(object):
        def __init__(self, v, cnt = 1, l = None, r = None):
            self.value = v
            self.count = cnt
            self.lChild = l
            self.rChild = r
            
    #Instantiates original class with root value  
    def __init__(self):
        self.root = None
        
    #Other methods  
    
    #Prints out all values in tree
    def printTree(self):
        self.printTreeUtil(self.root)
        
    #  
    def printTreeUtil(self, curr):
        if curr != None:
            print("[",curr.value, ":", curr.count,"]")
            self.printTreeUtil(curr.lChild)
            self.printTreeUtil(curr.rChild)
            
    #Inserts string value into tree     
    def insert(self, value):
        self.root = self.insertUtil(value, self.root)
        
    #
    def insertUtil(self, value, curr):
        if curr == None:
            curr = self.Node(value)
        else:
            compare = self.strcmp(curr.value, value)
            if compare == 0:
                curr.count += 1
            elif compare == 1:
                curr.lChild = self.insertUtil(value, curr.lChild)
            else:
                curr.rChild = self.insertUtil(value, curr.rChild)
        return curr
    
    def strcmp(self, first, second):
        if(first == second):
            return 0
        elif (first < second):
            return 1
        else:
            return -1
    
    def freeTree(self):
        self.root = None
    
    def find(self, value):
        ret = self.findUtil(self.root, value)
        print(value, "found::", ret)
        return ret
    
    def findUtil(self, curr, value):
        if curr == None:
            return False
        compare = self.strcmp(curr.value, value)
        if compare == 0:
            return True
        elif compare == 1:
            return self.findUtil(curr.lChild, value)
        else:
            return self.findUtil(curr.rChild, value)
        
    def frequency(self, value):
        return self.frequencyUtil(self.root, value)
    
    def frequencyUtil(self, curr, value):
        if curr == None:
            return 0
        compare = self.strcmp(curr.value, value)
        if compare == 0:
            return curr.count
        elif compare > 0:
            return self.frequencyUtil(curr.lChild, value)
        else:
            return self.frequencyUtil(curr.rChild, value)
            
tt = StringTree()
tt.insert("banana")    
tt.insert("apple")
tt.find("banana")   

tt.printTree()
    
    
               
#Binary Search Tree (BST) for numerical data
class Node:
    """
    Class Node
    """
    def __init__(self, value):
        self.left = None
        self.data = value
        self.right = None

class Tree:
    """
    Class tree will provide a tree as well as utility functions.
    """

    def createNode(self, data):
        """
        Utility function to create a node.
        """
        return Node(data)

    def insert(self, node , data):
        """
        Insert function will insert a node into tree.
        Duplicate keys are not allowed.
        """
        #if tree is empty , return a root node
        if node is None:
            return self.createNode(data)
        # if data is smaller than parent , insert it into left side
        if data < node.data:
            node.left = self.insert(node.left, data)
        elif data > node.data:
            node.right = self.insert(node.right, data)

        return node


    def search(self, node, data):
        """
        Search function will search a node into tree.
        """
        # if root is None or root is the search data.
        if node is None or node.data == data:
            return node

        if node.data < data:
            return self.search(node.right, data)
        else:
            return self.search(node.left, data)



    def deleteNode(self,node,data):
        """
        Delete function will delete a node into tree.
        Not complete , may need some more scenarion that we can handle
        Now it is handling only leaf.
        """

        # Check if tree is empty.
        if node is None:
            return None

        # searching key into BST.
        if data < node.data:
            node.left = self.deleteNode(node.left, data)
        elif data > node.data:
            node.right = self.deleteNode(node.right, data)
        else: # reach to the node that need to delete from BST.
            if node.left is None and node.right is None:
                del node
            if node.left == None:
                temp = node.right
                del node
                return  temp
            elif node.right == None:
                temp = node.left
                del node
                return temp

        return node

    def traverseInorder(self, root):
        """
        traverse function will print all the node in the tree.
        """
        if root is not None:
            self.traverseInorder(root.left)
            print(root.data)
            self.traverseInorder(root.right)

    def traversePreorder(self, root):
        """
        traverse function will print all the node in the tree.
        """
        if root is not None:
            print(root.data)
            self.traversePreorder(root.left)
            self.traversePreorder(root.right)

    def traversePostorder(self, root):
        """
        traverse function will print all the node in the tree.
        """
        if root is not None:
            self.traversePostorder(root.left)
            self.traversePostorder(root.right)
            print(root.data)

            
root = None
tree = Tree()
root = tree.insert(root, 10)
print(root)
# tree.insert(root, 20)
# tree.insert(root, 30)
# tree.insert(root, 40)
# tree.insert(root, 70)
# tree.insert(root, 60)
# tree.insert(root, 80)

# print("Traverse Inorder")
# tree.traverseInorder(root)

# print("Traverse Preorder")
# tree.traversePreorder(root)

# print("Traverse Postorder")
# tree.traversePostorder(root)
